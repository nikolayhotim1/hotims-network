{"version":3,"sources":["pages/ChatPage/ChatPage.module.css","pages/ChatPage/ChatPage.tsx"],"names":["module","exports","Message","message","className","style","src","photo","alt","userName","Messages","wsChannel","useState","messages","setMessages","useEffect","messageHandler","e","newMessages","JSON","parse","data","prevMessages","addEventListener","removeEventListener","map","m","i","AddMessageForm","setMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","disabled","type","onClick","send","Chat","setWsChannel","ws","closeHandler","setTimeout","createChannel","close","WebSocket","ChatPage"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,4B,oICQ5DC,EAA4C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpD,OACC,gCACC,qBAAKC,UAAWC,IAAMF,QAASG,IAAKH,EAAQI,MAAOC,IAAKL,EAAQM,WADjE,IAC8E,4BAAIN,EAAQM,WACzF,uBACCN,EAAQA,QACT,2BAIGO,EAAgD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACxD,EAAgCC,mBAA4B,IAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KAWA,OAVAC,qBAAU,WACT,IAAMC,EAAiB,SAACC,GACvB,IAAMC,EAAcC,KAAKC,MAAMH,EAAEI,MACjCP,GAAY,SAAAQ,GAAY,4BAAQA,GAAR,YAAyBJ,QAGlD,OADS,OAATP,QAAS,IAATA,KAAWY,iBAAiB,UAAWP,GAChC,WACG,OAATL,QAAS,IAATA,KAAWa,oBAAoB,UAAWR,MAEzC,CAACL,IAEH,qBAAKP,UAAWC,IAAMQ,SAAtB,SACEA,EAASY,KAAI,SAACC,EAAGC,GAAJ,OACb,cAACzB,EAAD,CAASC,QAASuB,GAAQC,SAKxBC,EAAsD,SAAC,GAAmB,IAAjBjB,EAAgB,EAAhBA,UAC9D,EAA8BC,mBAAS,IAAvC,mBAAOT,EAAP,KAAgB0B,EAAhB,KACA,EAAsCjB,mBAA8B,WAApE,mBAAOkB,EAAP,KAAoBC,EAApB,KAeA,OATAhB,qBAAU,WACT,IAAMiB,EAAc,WACnBD,EAAe,UAGhB,OADS,OAATpB,QAAS,IAATA,KAAWY,iBAAiB,OAAQS,GAC7B,WACG,OAATrB,QAAS,IAATA,KAAWa,oBAAoB,OAAQQ,MAEtC,CAACrB,IAEH,8BACC,kCACC,0BAAUsB,SAAU,SAAAhB,GAAC,OAAIY,EAAWZ,EAAEiB,cAAcC,QAAQA,MAAOhC,IACnE,uBACA,wBAAQiC,UAAWzB,GAA6B,UAAhBmB,EAAyBO,KAAK,SAASC,QAnBtD,WACdnC,IACI,OAATQ,QAAS,IAATA,KAAW4B,KAAKpC,GAChB0B,EAAW,MAgBT,wBAOEW,EAAW,WAChB,MAAkC5B,mBAA2B,MAA7D,mBAAOD,EAAP,KAAkB8B,EAAlB,KAmBA,OAlBA1B,qBAAU,WACT,IAAI2B,EACEC,EAAe,WACpBC,WAAWC,EAAe,MAErBA,EAAgB,WAAO,IAAD,IACzB,QAAF,EAAAH,SAAA,SAAIlB,oBAAoB,QAASmB,GAC/B,QAAF,EAAAD,SAAA,SAAII,SACJJ,EAAK,IAAIK,UAAU,iEAChBxB,iBAAiB,QAASoB,GAC7BF,EAAaC,IAGd,OADAG,IACO,WACNH,EAAGlB,oBAAoB,QAASmB,GAChCD,EAAGI,WAEF,IAEF,gCACC,cAACpC,EAAD,CAAUC,UAAWA,IACrB,cAACiB,EAAD,CAAgBjB,UAAWA,QAIjBqC,EAAe,WAC3B,OAAO,cAACR,EAAD","file":"static/js/6.ba4711d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"ChatPage_messages__16n5R\",\"message\":\"ChatPage_message__1-f9v\"};","import { FC, useEffect, useState } from 'react'\r\nimport style from './ChatPage.module.css'\r\n\r\nexport type ChatMessageType = {\r\n\tmessage: string\r\n\tphoto: string\r\n\tuserId: number\r\n\tuserName: string\r\n}\r\nconst Message: FC<{ message: ChatMessageType }> = ({ message }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img className={style.message} src={message.photo} alt={message.userName} /> <b>{message.userName}</b>\r\n\t\t\t<br />\r\n\t\t\t{message.message}\r\n\t\t\t<hr />\r\n\t\t</div>\r\n\t)\r\n}\r\nconst Messages: FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\r\n\tconst [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\tuseEffect(() => {\r\n\t\tconst messageHandler = (e: MessageEvent<any>): void => {\r\n\t\t\tconst newMessages = JSON.parse(e.data)\r\n\t\t\tsetMessages(prevMessages => [...prevMessages, ...newMessages])\r\n\t\t}\r\n\t\twsChannel?.addEventListener('message', messageHandler)\r\n\t\treturn () => {\r\n\t\t\twsChannel?.removeEventListener('message', messageHandler)\r\n\t\t}\r\n\t}, [wsChannel])\r\n\treturn (\r\n\t\t<div className={style.messages}>\r\n\t\t\t{messages.map((m, i) => (\r\n\t\t\t\t<Message message={m} key={i} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\nconst AddMessageForm: FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\r\n\tconst [message, setMessage] = useState('')\r\n\tconst [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\tconst sendMessage = () => {\r\n\t\tif (!message) return\r\n\t\twsChannel?.send(message)\r\n\t\tsetMessage('')\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tconst openHandler = () => {\r\n\t\t\tsetReadyStatus('ready')\r\n\t\t}\r\n\t\twsChannel?.addEventListener('open', openHandler)\r\n\t\treturn () => {\r\n\t\t\twsChannel?.removeEventListener('open', openHandler)\r\n\t\t}\r\n\t}, [wsChannel])\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<label>\r\n\t\t\t\t<textarea onChange={e => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n\t\t\t\t<br />\r\n\t\t\t\t<button disabled={!wsChannel || readyStatus !== 'ready'} type='submit' onClick={sendMessage}>\r\n\t\t\t\t\tSend\r\n\t\t\t\t</button>\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t)\r\n}\r\nconst Chat: FC = () => {\r\n\tconst [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\tuseEffect(() => {\r\n\t\tlet ws: WebSocket\r\n\t\tconst closeHandler = () => {\r\n\t\t\tsetTimeout(createChannel, 3000)\r\n\t\t}\r\n\t\tconst createChannel = () => {\r\n\t\t\tws?.removeEventListener('close', closeHandler)\r\n\t\t\tws?.close()\r\n\t\t\tws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\t\t\tws.addEventListener('close', closeHandler)\r\n\t\t\tsetWsChannel(ws)\r\n\t\t}\r\n\t\tcreateChannel()\r\n\t\treturn () => {\r\n\t\t\tws.removeEventListener('close', closeHandler)\r\n\t\t\tws.close()\r\n\t\t}\r\n\t}, [])\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Messages wsChannel={wsChannel} />\r\n\t\t\t<AddMessageForm wsChannel={wsChannel} />\r\n\t\t</div>\r\n\t)\r\n}\r\nexport const ChatPage: FC = () => {\r\n\treturn <Chat />\r\n}\r\n"],"sourceRoot":""}