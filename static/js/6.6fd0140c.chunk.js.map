{"version":3,"sources":["pages/ChatPage/ChatPage.module.css","pages/ChatPage/ChatPage.tsx"],"names":["module","exports","ChatPage","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","className","style","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","memo","src","photo","alt","userName","setMessage","placeholder","onChange","value","type","disabled","onClick","sendMessage"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,4B,6ICMrDC,EAAe,WAC3B,OAAO,cAACC,EAAD,KAEFA,EAAW,WAChB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAO/D,OANAI,qBAAU,WAET,OADAN,EAASO,eACF,WACNP,EAASQ,kBAER,CAACR,IAEH,gCACa,UAAXE,GAAsB,8EACvB,qCACC,cAACO,EAAD,IACA,cAACC,EAAD,WAKED,EAAe,WACpB,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAYA,OAHAV,qBAAU,WAAO,IAAD,EACf,UAAAM,EAAkBK,eAAlB,SAA2BC,gBAAe,KACxC,CAACP,IAEH,sBAAKQ,UAAWC,IAAMT,SAAUU,SAZX,SAACC,GACtB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC9Ed,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAOjC,UACEL,EAASmB,KAAI,SAACC,EAAGC,GAAJ,OACb,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAEjB,qBAAKC,IAAKxB,QAIPqB,EAA+CI,gBAAK,YAAkB,IAAfH,EAAc,EAAdA,QAC5D,OACC,gCACC,qBAAKI,IAAKJ,EAAQK,MAAOC,IAAKN,EAAQO,SAAUtB,UAAWC,IAAMc,UADlE,IAC8E,4BAAIA,EAAQO,WACzF,uBACCP,EAAQA,QACT,6BAIGxB,EAAqB,WAC1B,MAA8BI,mBAAS,IAAvC,mBAAOoB,EAAP,KAAgBQ,EAAhB,KACM1C,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAM/D,OACC,kCACC,0BAAUyC,YAAY,UAAUC,SAAU,SAAAtB,GAAC,OAAIoB,EAAWpB,EAAEE,cAAcqB,QAAQA,MAAOX,IACzF,uBACA,wBAAQY,KAAK,SAASC,SAAqB,UAAX7C,EAAoB8C,QAT3B,WACrBd,IACLlC,EAASiD,YAAYf,IACrBQ,EAAW,MAMV","file":"static/js/6.6fd0140c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"ChatPage_messages__16n5R\",\"message\":\"ChatPage_message__1-f9v\"};","import { FC, memo, UIEvent, useEffect, useRef, useState } from 'react'\r\nimport { ChatMessageAPIType } from '../../api/chatAPI'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chatReducer'\r\nimport { AppStateType } from '../../redux/reduxStore'\r\nimport style from './ChatPage.module.css'\r\n\r\nexport const ChatPage: FC = () => {\r\n\treturn <Chat />\r\n}\r\nconst Chat: FC = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst status = useSelector((state: AppStateType) => state.chat.status)\r\n\tuseEffect(() => {\r\n\t\tdispatch(startMessagesListening())\r\n\t\treturn () => {\r\n\t\t\tdispatch(stopMessagesListening())\r\n\t\t}\r\n\t}, [dispatch])\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n\t\t\t<>\r\n\t\t\t\t<Messages />\r\n\t\t\t\t<AddMessageForm />\r\n\t\t\t</>\r\n\t\t</div>\r\n\t)\r\n}\r\nconst Messages: FC = () => {\r\n\tconst messages = useSelector((state: AppStateType) => state.chat.messages)\r\n\tconst messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n\tconst [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\tconst scrollHandler = (e: UIEvent<HTMLDivElement>) => {\r\n\t\tconst element = e.currentTarget\r\n\t\tif (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n\t\t\t!isAutoScroll && setIsAutoScroll(true)\r\n\t\t} else {\r\n\t\t\tisAutoScroll && setIsAutoScroll(false)\r\n\t\t}\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tmessagesAnchorRef.current?.scrollIntoView(true)\r\n\t}, [messages])\r\n\treturn (\r\n\t\t<div className={style.messages} onScroll={scrollHandler}>\r\n\t\t\t{messages.map((m, index) => (\r\n\t\t\t\t<Message key={m.id} message={m} />\r\n\t\t\t))}\r\n\t\t\t<div ref={messagesAnchorRef}></div>\r\n\t\t</div>\r\n\t)\r\n}\r\nconst Message: FC<{ message: ChatMessageAPIType }> = memo(({ message }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img src={message.photo} alt={message.userName} className={style.message} /> <b>{message.userName}</b>\r\n\t\t\t<br />\r\n\t\t\t{message.message}\r\n\t\t\t<hr />\r\n\t\t</div>\r\n\t)\r\n})\r\nconst AddMessageForm: FC = () => {\r\n\tconst [message, setMessage] = useState('')\r\n\tconst dispatch = useDispatch()\r\n\tconst status = useSelector((state: AppStateType) => state.chat.status)\r\n\tconst sendMessageHandler = () => {\r\n\t\tif (!message) return\r\n\t\tdispatch(sendMessage(message))\r\n\t\tsetMessage('')\r\n\t}\r\n\treturn (\r\n\t\t<label>\r\n\t\t\t<textarea placeholder='Message' onChange={e => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n\t\t\t<br />\r\n\t\t\t<button type='submit' disabled={status !== 'ready'} onClick={sendMessageHandler}>\r\n\t\t\t\tSend\r\n\t\t\t</button>\r\n\t\t</label>\r\n\t)\r\n}\r\n"],"sourceRoot":""}