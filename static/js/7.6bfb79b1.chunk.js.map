{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"names":["module","exports","FormsControl","meta","touched","error","children","hasError","className","style","formControl","Textarea","input","props","Input","createField","component","name","placeholder","validators","text","validate","required","value","maxLengthCreator","maxLength","length","LoginForm","handleSubmit","captchaURL","onSubmit","type","src","alt","formSummaryError","LoginReduxForm","reduxForm","form","connect","state","auth","isAuth","login","to","formData","email","password","rememberMe","captcha"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,qNCQrHC,EAA0C,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACnEC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAS,UAAKC,IAAMC,YAAX,YAA0BH,EAAWE,IAAMJ,MAAQ,IAAjE,UACI,8BAAMC,IACLC,GAAY,+BAAOF,QAInBM,EAAkC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,iBACpE,OACI,cAACX,EAAD,2BAAkBW,GAAlB,aACI,oDAAcD,GAAWC,QAIxBC,EAA+B,SAAC,GAAyB,IAAvBF,EAAsB,EAAtBA,MAAUC,EAAY,iBACjE,OACI,cAACX,EAAD,2BAAkBW,GAAlB,aACI,iDAAWD,GAAWC,QAI3B,SAASE,EACZC,EACAC,EACAC,EACAC,GAGD,IAFCN,EAEF,uDAFU,GACRO,EACF,uDADS,GAEP,OACI,gCACI,cAAC,IAAD,aACIJ,UAAWA,EACXC,KAAMA,EACNC,YAAaA,EACbG,SAAUF,GACNN,IACLO,O,iCC/Cf,oEAAO,IAAME,EAA+B,SAACC,GACzC,IAAIA,EACJ,MAAO,qBAEEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,wGC2BnBE,EAvBsF,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,aAAcvB,EAAwB,EAAxBA,MAAOwB,EAAiB,EAAjBA,WACzH,OACI,uBAAMC,SAAUF,EAAhB,UACKb,YAAqCD,IAAO,QAAS,QAAS,CAACQ,MAC/DP,YAAqCD,IAAO,WAAY,WAAY,CAACQ,KAAW,CAAES,KAAM,aACxFhB,YAAqCD,IAAO,aAAc,KAAM,GAAI,CAAEiB,KAAM,YAAc,eAC1FF,GACG,qCACI,qBAAKG,IAAKH,EAAYI,IAAI,gBACzBlB,YAAqCD,IAAO,UAAW,2BAA4B,CAACQ,SAG5FjB,GACG,qBAAKG,UAAWC,IAAMyB,iBAAtB,SACK7B,IAGT,8BACI,iD,eCpBV8B,EAAiBC,YAAkD,CAAEC,KAAM,SAA1DD,CAAqET,GAiC7EW,uBAJS,SAACC,GAAD,MAA4C,CAChEV,WAAYU,EAAMC,KAAKX,WACvBY,OAAQF,EAAMC,KAAKC,UAEiB,CAAEC,WAA3BJ,EAlB6C,SAAC,GAAmC,IAAjCI,EAAgC,EAAhCA,MAAOD,EAAyB,EAAzBA,OAAQZ,EAAiB,EAAjBA,WAI1E,OAAIY,EACO,cAAC,IAAD,CAAUE,GAAG,aAGpB,gCACI,uCACA,cAACR,EAAD,CAAgBL,SATP,SAACc,GACdF,EAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAQ/BnB,WAAYA","file":"static/js/7.6bfb79b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__80KjQ\",\"error\":\"FormsControls_error__2lhvj\",\"formSummaryError\":\"FormsControls_formSummaryError__1HBrY\"};","import { FieldValidatorType } from '../../../utils/validators/validators';\r\nimport { FC, ReactNode } from 'react';\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport style from './FormsControls.module.css';\r\n\r\ntype FormsControlPropsType = {\r\n    meta: WrappedFieldMetaProps,\r\n    children: ReactNode\r\n};\r\nconst FormsControl: FC<FormsControlPropsType> = ({ meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={`${style.formControl} ${hasError ? style.error : ''}`}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\nexport const Textarea: FC<WrappedFieldProps> = ({ input, ...props }) => {\r\n    return (\r\n        <FormsControl {...props}>\r\n            <textarea {...input} {...props} />\r\n        </FormsControl>\r\n    );\r\n};\r\nexport const Input: FC<WrappedFieldProps> = ({ input, ...props }) => {\r\n    return (\r\n        <FormsControl {...props}>\r\n            <input {...input} {...props} />\r\n        </FormsControl>\r\n    );\r\n};\r\nexport function createField<FormKeysType extends string>(\r\n    component: FC<WrappedFieldProps>,\r\n    name: FormKeysType,\r\n    placeholder: string | null,\r\n    validators: Array<FieldValidatorType>,\r\n    props = {},\r\n    text = ''\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                component={component}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                validate={validators}\r\n                {...props}\r\n            />{text}\r\n        </div>\r\n    );\r\n};","export type FieldValidatorType = (value: string) => string | undefined;\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import { FC } from 'react';\r\nimport { InjectedFormProps } from 'redux-form';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { createField, Input, } from '../common/FormsControls/FormsControls';\r\nimport style from '../common/FormsControls/FormsControls.module.css';\r\nimport { LoginFormValuesType, LoginFormValuesTypeKeys } from './Login';\r\n\r\nexport type LoginFormOwnProps = {\r\n    captchaURL: string | null\r\n};\r\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaURL }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(Input, 'email', 'Email', [required])}\r\n            {createField<LoginFormValuesTypeKeys>(Input, 'password', 'Password', [required], { type: 'password' })}\r\n            {createField<LoginFormValuesTypeKeys>(Input, 'rememberMe', null, [], { type: 'checkbox' }, 'Remember me')}\r\n            {captchaURL &&\r\n                <>\r\n                    <img src={captchaURL} alt='captcha-url' />\r\n                    {createField<LoginFormValuesTypeKeys>(Input, 'captcha', 'Enter symbols from image', [required])}\r\n                </>\r\n            }\r\n            {error &&\r\n                <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport default LoginForm;","import { connect } from 'react-redux';\r\nimport { reduxForm } from 'redux-form';\r\nimport LoginForm, { LoginFormOwnProps } from './LoginForm';\r\nimport { login } from '../../redux/authReducer';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { AppSateType } from '../../redux/reduxStore';\r\nimport { FC } from 'react';\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(LoginForm);\r\ntype MapStatePropsType = {\r\n    captchaURL: string | null,\r\n    isAuth: boolean\r\n};\r\ntype MapDispatchPropsType = {\r\n    login: (email: string | null, password: string | null, rememberMe: boolean, captcha: string | null) => void\r\n};\r\nexport type LoginFormValuesType = {\r\n    email: string | null,\r\n    password: string | null,\r\n    rememberMe: boolean,\r\n    captcha: string | null\r\n};\r\nexport type LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>;\r\nconst Login: FC<MapStatePropsType & MapDispatchPropsType> = ({ login, isAuth, captchaURL }) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    };\r\n    if (isAuth) {\r\n        return <Navigate to='/profile' />;\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL} />\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state: AppSateType): MapStatePropsType => ({\r\n    captchaURL: state.auth.captchaURL,\r\n    isAuth: state.auth.isAuth\r\n});\r\nexport default connect(mapStateToProps, { login })(Login);"],"sourceRoot":""}