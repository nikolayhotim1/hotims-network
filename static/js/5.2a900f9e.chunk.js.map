{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hocs/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","style","dialog","isActive","active","a","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","new_message","onSubmit","handleSubmit","createField","Textarea","required","type","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageText","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,QAAU,yBAAyB,EAAI,mBAAmB,OAAS,wBAAwB,SAAW,0BAA0B,YAAc,+B,sGCI9NC,EAA6B,SAACC,GACnC,MAAO,CACNC,OAAQD,EAAME,KAAKD,S,uCCWNE,EAVmB,SAACC,GAClC,IAAMC,EAAI,mBAAeD,EAAME,IAC/B,OACC,qBAAKC,UAAWC,IAAMC,OAAtB,SACC,cAAC,IAAD,CAASF,UAAW,SAACE,GAAD,OAAaA,EAAOC,SAAWF,IAAMG,OAASH,IAAMI,GAAIC,GAAIR,EAAhF,SACED,EAAMU,UCHIC,EAJgB,SAACX,GAC/B,OAAO,qBAAKG,UAAWC,IAAMQ,QAAtB,SAAgCZ,EAAMY,W,0BCIxCC,EAAcC,YAAiB,IAatBC,cAA+C,CAAEC,KAAM,UAAvDD,EAZ6E,SAACf,GAC5F,OACC,uBAAMG,UAAWC,IAAMa,YAAaC,SAAUlB,EAAMmB,aAApD,UACC,8BACEC,YAA0CC,IAAU,iBAAkB,cAAe,CAACC,IAAUT,MAElG,8BACC,wBAAQU,KAAK,SAAb,kCCOWC,EAfgB,SAACxB,GAC/B,IAAMJ,EAAQI,EAAMyB,YACdC,EAAkB9B,EAAM+B,QAAQC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAiBR,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAC5E4B,EAAmBlC,EAAMmC,SAASH,KAAI,SAACI,GAAD,OAAO,cAAC,EAAD,CAASpB,QAASoB,EAAEpB,SAAcoB,EAAE9B,OAIvF,OACC,sBAAKC,UAAWC,IAAMuB,QAAtB,UACC,8BAAMD,IACN,qBAAKvB,UAAWC,IAAM2B,SAAtB,SAAiCD,IACjC,cAAC,EAAD,CAAaZ,SAPO,SAACe,GACtBjC,EAAMkC,YAAYD,EAAOE,uBCHZC,sBAAuBC,aALd,SAACzC,GACxB,MAAO,CACN6B,YAAa7B,EAAM6B,eAG0C,CAAES,YAAaI,IAAQJ,eLD/E,SAA8CK,GAMpD,OAAOF,YAA4D1C,EAA4B,GAAxF0C,EALyD,SAACrC,GAChE,IAAQH,EAAyBG,EAAzBH,OAAW2C,EAAnB,YAAiCxC,EAAjC,GACA,OAAKH,EACE,cAAC0C,EAAD,eAAuBC,IADV,cAAC,IAAD,CAAU/B,GAAI,gBKFrB2B,CAAyGZ","file":"static/js/5.2a900f9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Yd3H\",\"dialog\":\"Dialogs_dialog__2cT5u\",\"message\":\"Dialogs_message__21zVT\",\"a\":\"Dialogs_a__31JU4\",\"active\":\"Dialogs_active__2bzvZ\",\"messages\":\"Dialogs_messages__VEn_q\",\"new_message\":\"Dialogs_new_message__3uWWp\"};","import { Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../redux/reduxStore'\r\nimport { ComponentType, FC } from 'react'\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n\treturn {\r\n\t\tisAuth: state.auth.isAuth\r\n\t}\r\n}\r\ntype MapPropsType = { isAuth: boolean }\r\ntype DispatchPropsType = {}\r\nexport function withAuthRedirect<WCP extends object>(WrappedComponent: ComponentType<WCP>) {\r\n\tconst RedirectComponent: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\t\tconst { isAuth, ...restProps } = props\r\n\t\tif (!isAuth) return <Navigate to={'/login'} />\r\n\t\treturn <WrappedComponent {...(restProps as WCP)} />\r\n\t}\r\n\treturn connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n}\r\n","import { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport style from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n\tid: number\r\n\tname: string\r\n}\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n\tconst path = `/dialogs/${props.id}`\r\n\treturn (\r\n\t\t<div className={style.dialog}>\r\n\t\t\t<NavLink className={(dialog) => (dialog.isActive ? style.active : style.a)} to={path}>\r\n\t\t\t\t{props.name}\r\n\t\t\t</NavLink>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default DialogItem\r\n","import { FC } from 'react'\r\nimport style from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n\tmessage: string\r\n}\r\nconst Message: FC<PropsType> = (props) => {\r\n\treturn <div className={style.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message\r\n","import style from './Dialogs.module.css'\r\nimport { createField, GetStringKeys, Textarea } from '../common/FormsControls/FormsControls'\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators'\r\nimport { FC } from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\n\r\ntype PropsType = {}\r\nexport type NewMessageFormValuesType = {\r\n\tnewMessageText: string | null\r\n}\r\ntype NewMessageFormValuesTypeKeys = GetStringKeys<NewMessageFormValuesType>\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst DialogsForm: FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n\treturn (\r\n\t\t<form className={style.new_message} onSubmit={props.handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t{createField<NewMessageFormValuesTypeKeys>(Textarea, 'newMessageText', 'New message', [required, maxLength50])}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button type='submit'>Send message</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\nexport default reduxForm<NewMessageFormValuesType, PropsType>({ form: 'dialog' })(DialogsForm)\r\n","import { FC } from 'react'\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport DialogsForm, { NewMessageFormValuesType } from './DialogsForm'\r\nimport { InitialStateType } from '../../redux/dialogsReducer'\r\n\r\ntype PropsType = {\r\n\tdialogsPage: InitialStateType\r\n\tsendMessage: (newMessageText: string | null) => void\r\n}\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n\tconst state = props.dialogsPage\r\n\tconst dialogsElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n\tconst messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id} />)\r\n\tconst addNewMessage = (values: NewMessageFormValuesType) => {\r\n\t\tprops.sendMessage(values.newMessageText)\r\n\t}\r\n\treturn (\r\n\t\t<div className={style.dialogs}>\r\n\t\t\t<div>{dialogsElements}</div>\r\n\t\t\t<div className={style.messages}>{messagesElements}</div>\r\n\t\t\t<DialogsForm onSubmit={addNewMessage} />\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Dialogs\r\n","import { ComponentType } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../hocs/withAuthRedirect'\r\nimport { actions } from '../../redux/dialogsReducer'\r\nimport { AppStateType } from '../../redux/reduxStore'\r\nimport Dialogs from './Dialogs'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage\r\n\t}\r\n}\r\nexport default compose<ComponentType>(connect(mapStateToProps, { sendMessage: actions.sendMessage }), withAuthRedirect)(Dialogs)\r\n"],"sourceRoot":""}